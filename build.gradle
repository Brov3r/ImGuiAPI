/**
 * Gradle plugins
 */
plugins {
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'java'
}

group = 'io.github.brov3r.imgui'
version = '1.1'

/**
 * Path to the compiled Jar file
 */
def buildPath = System.getenv('BUILD_PATH') ?: 'build';

/**
 * Repositories for project dependencies
 */
repositories {
    mavenCentral()
}

/**
 * Replacing data with current ones
 */
processResources {
    filesMatching('**/metadata.yml') {
        filter {
            it.replace('%PROJECT_VERSION%', version)
        }
    }
}

/**
 * Project Dependencies
 */
dependencies {
    /**
     * Project Zomboid
     * You can download these dependencies on the Avrix releases page (https://github.com/Brov3r/Avrix/releases)
     */
    compileOnly files('./libs/ProjectZomboid-core-41.78.16.jar')
    compileOnly files('./libs/ProjectZomboid-libs-41.78.16.jar')

    /**
     * Utils
     */
    compileOnly('org.javassist:javassist:3.30.2-GA')

    /**
     * ImGui
     */
    implementation "io.github.spair:imgui-java-binding:1.86.12"
    implementation "io.github.spair:imgui-java-lwjgl3:1.86.12"
    implementation "io.github.spair:imgui-java-natives-windows:1.86.12"
    implementation "io.github.spair:imgui-java-natives-macos:1.86.12"
    implementation "io.github.spair:imgui-java-natives-linux:1.86.12"

    /**
     * Avrix Loader
     * You can download these dependencies on the Avrix releases page (https://github.com/Brov3r/Avrix/releases)
     */
    compileOnly files('./libs/Avrix-Core-1.5.2.jar')
}

/**
 * Creating a Jar file
 */
shadowJar {
    archiveFileName.set("${rootProject.name}-${version}.jar")
    destinationDirectory.set(file(buildPath))

    manifest {
        attributes(
                'Implementation-Title': rootProject.name,
                'Implementation-Version': version,
        )
    }
}

/**
 * Building a release Jars archive with documentation and sources
 */
tasks.register('releaseBuildJar') {
    dependsOn sourceJar
    finalizedBy shadowJar
}

/**
 * Download sources
 */
tasks.register('downloadSources') {
    inputs.files configurations.runtimeClasspath
    outputs.dir "${buildDir}/download"

    def componentIds = configurations.runtimeClasspath.incoming.resolutionResult.allDependencies.collect { it.selected.id }

    ArtifactResolutionResult result = dependencies.createArtifactResolutionQuery()
            .forComponents(componentIds)
            .withArtifacts(JvmLibrary, SourcesArtifact)
            .execute()

    def sourceArtifacts = []

    result.resolvedComponents.each { ComponentArtifactsResult component ->
        Set<ArtifactResult> sources = component.getArtifacts(SourcesArtifact)
        println "Found ${sources.size()} sources for ${component.id}"
        sources.each { ArtifactResult ar ->
            if (ar instanceof ResolvedArtifactResult) {
                sourceArtifacts << ar.file
            }
        }
    }

    copy {
        from sourceArtifacts
        into "${buildDir}/download"
    }
}

/**
 * Packaging source code in a Jar archive
 */
tasks.register('sourceJar', Jar) {
    dependsOn downloadSources
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveBaseName.set("${rootProject.name}")
    archiveClassifier.set('sources')

    // Include all sources from your project
    from(sourceSets.main.allSource)

    // Extract contents of JAR files and include in the source JAR
    def sourceJarFiles = file("${buildDir}/download").listFiles().findAll { it.name.endsWith('.jar') }

    if (sourceJarFiles) {
        sourceJarFiles.each { jarFile ->
            from(zipTree(jarFile))
        }
    } else {
        logger.warn "No source JAR files found in ${buildDir}/download"
    }

    destinationDirectory.set(file(buildPath))
}